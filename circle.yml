version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:jdk
    working_directory: ~/sheeeng/omed-buck
    steps:
      - checkout
      - run:
          name: Interpolating Environment Variables to Set Other Environment Variables
          # If you need to interpolate other environment variables to set an environment variable, the only place to do this at the moment is in bash.
          # CircleCI 2.0 automatically sets a $BASH_ENV variable to a random name in /tmp, and will source this file for each step.
          # https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables
          command: |
            echo 'export DEBIAN_FRONTEND=noninteractive' >> $BASH_ENV
            echo 'export THIRDPARTY_DIR=${PWD}/3rdparty' >> $BASH_ENV
            echo 'export GOOGLETEST_DIR=${THIRDPARTY_DIR}/googletest-master' >> $BASH_ENV
            echo 'export GTEST_DIR=${GOOGLETEST_DIR}/googletest' >> $BASH_ENV
            echo 'export GMOCK_DIR=${GOOGLETEST_DIR}/googlemock' >> $BASH_ENV
      - run:
          name: Update & Upgrade
          command: |
            set -x
            sudo apt-get update
            sudo apt-get upgrade
      - run:
          name: Check Version
          command: |
            set -x
            java -version
      - run:
          name: Setup Make Prerequisites
          command: |
            set -x
            echo "Setup Make Prerequisites ..."
            sudo apt-get install --yes build-essential
            gcc --version
      - run:
          name: Get Submodule(s)
          command: |
            git submodule init
            git submodule update
      - run:
          name: Setup Buck
          command: |
            set -x
            echo "Setup Buck ..."
            sudo apt-get install --yes default-jdk ant python git
            git clone https://github.com/facebook/buck.git ${HOME}/buck
            cd ~/buck
            time ant
            # echo "That said, as a sanity check, Buck is capable of building itself. Once you build Buck using Ant, you can re-build Buck using Buck by running ./bin/buck build buck."
            # echo "https://buckbuild.com/concept/faq.html"
            # time bin/buck build buck --verbose 1 --no-cache
            cd -
            sudo ln -s ${HOME}/buck/bin/buck /usr/bin/buck
            sudo ln -s ${HOME}/buck/bin/buckd /usr/bin/buckd
            buck --version
      - run:
          name: Build Google Test
          command: |
            set -x
            echo "Build Google Test ..."
            cp bak/BAK 3rdparty/googletest-master/BUCK
            buck build //3rdparty/googletest-master:gtest
      - run:
          name: List Build Targets with Buck
          command: |
            set -x
            buck targets
      - run:
          name: Build with Buck
          command: |
            set -x
            buck build //:mainy --verbose 1 --no-cache
      - run:
          name: Run after Buck
          command: |
            set -x
            buck run //:mainy x y z --no-cache
      - store_artifacts:
          path: buck-out/
      - store_artifacts:
          path: buck-out/
          destination: buckout
  test:
    docker:
      - image: circleci/openjdk:jdk
    working_directory: ~/sheeeng/omed-buck
    steps:
      - checkout
      - run:
          name: Interpolating Environment Variables to Set Other Environment Variables
          # If you need to interpolate other environment variables to set an environment variable, the only place to do this at the moment is in bash.
          # CircleCI 2.0 automatically sets a $BASH_ENV variable to a random name in /tmp, and will source this file for each step.
          # https://circleci.com/docs/2.0/env-vars/#interpolating-environment-variables-to-set-other-environment-variables
          command: |
            echo 'export DEBIAN_FRONTEND=noninteractive' >> $BASH_ENV
            echo 'export THIRDPARTY_DIR=${PWD}/3rdparty' >> $BASH_ENV
            echo 'export GOOGLETEST_DIR=${THIRDPARTY_DIR}/googletest-master' >> $BASH_ENV
            echo 'export GTEST_DIR=${GOOGLETEST_DIR}/googletest' >> $BASH_ENV
            echo 'export GMOCK_DIR=${GOOGLETEST_DIR}/googlemock' >> $BASH_ENV
      - run:
          name: Update & Upgrade
          command: |
            set -x
            sudo apt-get update
            sudo apt-get upgrade
      - run:
          name: Check Version
          command: |
            set -x
            java -version
      - run:
          name: Setup Make Prerequisites
          command: |
            set -x
            echo "Setup Make Prerequisites ..."
            sudo apt-get install --yes build-essential
            gcc --version
      - run:
          name: Get Submodule(s)
          command: |
            git submodule init
            git submodule update
      - run:
          name: Setup Buck
          command: |
            set -x
            echo "Setup Buck ..."
            sudo apt-get install --yes default-jdk ant python git
            git clone https://github.com/facebook/buck.git ${HOME}/buck
            cd ~/buck
            time ant
            # echo "That said, as a sanity check, Buck is capable of building itself. Once you build Buck using Ant, you can re-build Buck using Buck by running ./bin/buck build buck."
            # echo "https://buckbuild.com/concept/faq.html"
            # time bin/buck build buck --verbose 1 --no-cache
            cd -
            sudo ln -s ${HOME}/buck/bin/buck /usr/bin/buck
            sudo ln -s ${HOME}/buck/bin/buckd /usr/bin/buckd
            buck --version
      - run:
          name: Build Google Test
          command: |
            set -x
            echo "Build Google Test ..."
            cp bak/BAK 3rdparty/googletest-master/BUCK
            buck build //3rdparty/googletest-master:gtest
      - run:
          name: Artifact
          shell: /bin/sh
          command: | # shorthanded command can also have multiple lines
            echo "<p>Hi, <img width=16 src='img/world.svg'></p>" | sudo tee $CIRCLE_ARTIFACTS/hello.html
            sudo mkdir $CIRCLE_ARTIFACTS/img
            sudo curl "http://wikimedia.org/wikipedia/commons/e/e2/Ambox_globe.svg" -o $CIRCLE_ARTIFACTS/img/world.svg
      - run:
          name: List Build Targets with Buck
          command: |
            set -x
            buck targets
      - run:
          name: Test using Buck with Google Test
          command: |
            set -x
            mkdir -p ${GTEST_DIR}/build/test-results
            buck test //:greety_test --verbose 1 --num-threads 1 --no-cache --gtest_output=xml:${GTEST_DIR}/build/test-results/greety_test_test_results.xml
      - store_artifacts:
          path: ~/sheeeng/omed-buck/3rdparty/googletest-master/googletest/build/
      - store_artifacts:
          path: ~/sheeeng/omed-buck/3rdparty/googletest-master/googletest/build/
          destination: googletest-build
      - store_artifacts:
          path: ~/sheeeng/omed-buck/3rdparty/googletest-master/googletest/build/test-results/
          destination: googletest-build-testresults
      - store_artifacts:
          path: buck-out/
      - store_artifacts:
          path: buck-out/
          destination: buckout
workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
          filters:
            branches:
              only: master
